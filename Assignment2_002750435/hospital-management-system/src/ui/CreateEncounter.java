/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import java.util.Date;
import java.util.List;
import java.util.Random;
import javax.swing.JOptionPane;
import model.City;
import model.Community;
import model.DoctorDetails;
import model.EncounterDetails;
import model.EncounterHistory;
import model.Hospital;
import model.PatientDirectory;
import model.SystemAdmin;
import model.VitalSigns;
import validators.StringValidator;

/**
 *
 * @author zainabkhokawala
 */
public class CreateEncounter extends javax.swing.JPanel {

    /**
     * Creates new form CreateEncounter
     */
   
    public CreateEncounter() {
        initComponents();
 
        populateCities();
        comboCommunity.removeAllItems();
        comboDoctor.removeAllItems();
        comboHospital.removeAllItems();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        timeChooser1 = new javax.swing.JFormattedTextField();
        lblTime1 = new javax.swing.JLabel();
        lblCreateEncounter = new javax.swing.JLabel();
        lblSelectCity = new javax.swing.JLabel();
        lblSearchHospital = new javax.swing.JLabel();
        comboCity = new javax.swing.JComboBox<>();
        lblSelectCommunity = new javax.swing.JLabel();
        comboCommunity = new javax.swing.JComboBox<>();
        lblDate = new javax.swing.JLabel();
        lblTime = new javax.swing.JLabel();
        dateChooser = new com.toedter.calendar.JDateChooser();
        timeChooser = new javax.swing.JFormattedTextField();
        btnBookAppointment = new javax.swing.JButton();
        comboDoctor = new javax.swing.JComboBox<>();
        lblSelectDoctor = new javax.swing.JLabel();
        comboHospital = new javax.swing.JComboBox<>();
        lblPatientName = new javax.swing.JLabel();
        txtPatientName = new javax.swing.JTextField();

        timeChooser1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getTimeInstance(java.text.DateFormat.SHORT))));
        timeChooser1.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        lblTime1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblTime1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblTime1.setText("Appointment Time");

        lblCreateEncounter.setFont(new java.awt.Font("Arial", 2, 24)); // NOI18N
        lblCreateEncounter.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCreateEncounter.setText("Create Appointment");
        lblCreateEncounter.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 102, 255), 3));

        lblSelectCity.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblSelectCity.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblSelectCity.setText("Select City");

        lblSearchHospital.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblSearchHospital.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblSearchHospital.setText("Search Hospital");

        comboCity.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboCityActionPerformed(evt);
            }
        });

        lblSelectCommunity.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblSelectCommunity.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblSelectCommunity.setText("Select Community");

        comboCommunity.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboCommunity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboCommunityActionPerformed(evt);
            }
        });

        lblDate.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblDate.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblDate.setText("Appointment Date");

        lblTime.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblTime.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblTime.setText("Appointment Time");

        dateChooser.setDateFormatString("MM/dd/yyyy");

        timeChooser.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getTimeInstance(java.text.DateFormat.SHORT))));
        timeChooser.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        timeChooser.setInputVerifier(new StringValidator());
        timeChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeChooserActionPerformed(evt);
            }
        });

        btnBookAppointment.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btnBookAppointment.setText("Book Appointment");
        btnBookAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBookAppointmentActionPerformed(evt);
            }
        });

        comboDoctor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboDoctorActionPerformed(evt);
            }
        });

        lblSelectDoctor.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblSelectDoctor.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblSelectDoctor.setText("Select Doctor");

        comboHospital.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboHospital.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboHospitalActionPerformed(evt);
            }
        });

        lblPatientName.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblPatientName.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblPatientName.setText("Patient Name");

        txtPatientName.setInputVerifier(new StringValidator());
        txtPatientName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPatientNameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblCreateEncounter, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(241, 241, 241)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblPatientName, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtPatientName, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(48, 48, 48)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(lblSelectDoctor)
                                .addComponent(lblSearchHospital, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(comboHospital, 0, 256, Short.MAX_VALUE)
                                .addComponent(comboDoctor, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(btnBookAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, 421, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(lblTime, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lblDate, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(dateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(timeChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(58, 58, 58)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblSelectCity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblSelectCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(comboCity, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(comboCommunity, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                .addGap(282, 282, 282))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(lblCreateEncounter, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(114, 114, 114)
                        .addComponent(lblSelectCity, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPatientName, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPatientName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(comboCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSelectCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboHospital, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSearchHospital, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSelectDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDate, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(timeChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTime, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnBookAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(407, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void comboCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboCityActionPerformed
        // TODO add your handling code here:
        comboCommunity.removeAllItems();
        comboDoctor.removeAllItems();
        comboHospital.removeAllItems();
        System.out.println("Entering the action listener");
        
        if(comboCity.getSelectedItem() != null){
            String cityName = comboCity.getSelectedItem().toString();
            if(!cityName.equalsIgnoreCase("Select city")){
                City city = SystemAdmin.cityDirectoryRef.getCityDirectory().stream()
                    .filter( c -> c.getName().equals(cityName)).findFirst().orElse(null);
                
                city.getCommunityNames().forEach(System.out::println);
                List<Community> communities = SystemAdmin.communityDirectoryRef.getCommunityDirectory().stream()
                                                .filter( comm -> city.getCommunityNames().contains(comm.getCommunityName()))
                                                .toList();
                
                populateCommunities(communities);
            }
            
        }
        
    }//GEN-LAST:event_comboCityActionPerformed

    private void comboHospitalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboHospitalActionPerformed
        // TODO add your handling code here:
        if(comboHospital.getSelectedItem() != null){
            String hospitalName = comboHospital.getSelectedItem().toString();
            if(!hospitalName.equalsIgnoreCase("Select hospital")){
                
                List<DoctorDetails> doctors = SystemAdmin.doctorDirectoryRef.getDoctorDirectory().stream()
                                        .filter( doctor -> doctor.getHospitalName().equalsIgnoreCase(hospitalName))
                                        .toList();
                
                populateDoctors(doctors);
              
            }
            
        }
    }//GEN-LAST:event_comboHospitalActionPerformed

    private void comboCommunityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboCommunityActionPerformed
        // TODO add your handling code here:
        comboDoctor.removeAllItems();
        comboHospital.removeAllItems();
        
        if(comboCommunity.getSelectedItem() != null){
            String communityName = comboCommunity.getSelectedItem().toString();
            if(!communityName.equalsIgnoreCase("Select community")){
                Community community = SystemAdmin.communityDirectoryRef.getCommunityDirectory().stream()
                                        .filter( comm -> comm.getCommunityName().equals(communityName))
                                        .findFirst().orElse(null);
                
                List<Hospital> hospitals = SystemAdmin.hospitalDirectoryRef.getHospitalDirectory().stream()
                                                .filter( hos -> hos.getCommunityZip() == community.getCommunityZip()).toList();
                
                
                populateHospitals(hospitals);
              
            }
            
        }
    }//GEN-LAST:event_comboCommunityActionPerformed

    private void comboDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboDoctorActionPerformed
        // TODO add your handling code here:
        
        
        
    }//GEN-LAST:event_comboDoctorActionPerformed

    private void btnBookAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBookAppointmentActionPerformed
        // TODO add your handling code here:
        String patientName = txtPatientName.getText();
        String city = comboCity.getSelectedItem().toString();
        String community = comboCommunity.getSelectedItem().toString();
        String hospital = comboHospital.getSelectedItem().toString();
        String doctor = comboDoctor.getSelectedItem().toString();
        Date date = dateChooser.getDate();
        System.out.println(date);
        String time = timeChooser.getText();
        Random rand = new Random();
        
        long id = rand.nextLong(10000000);
        
        EncounterDetails encounter = new EncounterDetails(id, date, time, "", 
                patientName, doctor, new VitalSigns());
        
        SystemAdmin.encounterHistoryRef.getEncounterDirectory().add(encounter);
        JOptionPane.showMessageDialog(this, "New Encounter Details Added Successfully!");
       
        txtPatientName.setText("");
        comboCity.removeAllItems();
        comboCommunity.removeAllItems();
        comboHospital.removeAllItems();
        comboDoctor.removeAllItems();
        dateChooser.setCalendar(null);
        timeChooser.setText("");
        


    }//GEN-LAST:event_btnBookAppointmentActionPerformed

    private void txtPatientNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPatientNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPatientNameActionPerformed

    private void timeChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeChooserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_timeChooserActionPerformed

    private void populateCities(){
        comboCity.removeAllItems();
        comboCity.addItem("Select City");
        SystemAdmin.cityDirectoryRef.getCityDirectory().forEach( c -> comboCity.addItem(c.getName()));
    }
    
    private void populateCommunities(List<Community> communities){
        
        comboCommunity.removeAllItems();
        comboCommunity.addItem("Select Community");
        communities.forEach( comm -> comboCommunity.addItem(comm.getCommunityName()));
    }
    
    private void populateHospitals(List<Hospital> hospitals){
        comboHospital.removeAllItems();
        comboHospital.addItem("Select Hospital");
        hospitals.forEach( hosp -> comboHospital.addItem(hosp.getHospitalName()));
    }
    
    private void populateDoctors(List<DoctorDetails> doctors){
        comboDoctor.removeAllItems();
        comboDoctor.addItem("Select Doctor");
        doctors.forEach(doc -> comboDoctor.addItem(doc.getPersonFullName()));
        
    }
    
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBookAppointment;
    private javax.swing.JComboBox<String> comboCity;
    private javax.swing.JComboBox<String> comboCommunity;
    private javax.swing.JComboBox<String> comboDoctor;
    private javax.swing.JComboBox<String> comboHospital;
    private com.toedter.calendar.JDateChooser dateChooser;
    private javax.swing.JLabel lblCreateEncounter;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblPatientName;
    private javax.swing.JLabel lblSearchHospital;
    private javax.swing.JLabel lblSelectCity;
    private javax.swing.JLabel lblSelectCommunity;
    private javax.swing.JLabel lblSelectDoctor;
    private javax.swing.JLabel lblTime;
    private javax.swing.JLabel lblTime1;
    private javax.swing.JFormattedTextField timeChooser;
    private javax.swing.JFormattedTextField timeChooser1;
    private javax.swing.JTextField txtPatientName;
    // End of variables declaration//GEN-END:variables
}
